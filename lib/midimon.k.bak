
function midimon(verbose) {

	if ( nargs() < 1 )
		verbose = 0
	# spawn the task that will monitor MIDI input
	t = task task_midimon(verbose)

	Root.waitforconsolekey()

	kill(t)
}

function unkorgmon(k,f) {
	k.unsendtofifo(f)
}

function print_cs32_msg(m) {
	ch = (integer(subbytes(m,1,1)) & 0xf) + 1
	ct = integer(subbytes(m,2,1))
	v = integer(subbytes(m,3,1))
	if ( ch == 14 && ct >= 16 && ct < 32 )
		print("CS32 row 0 slot ",ct-16," val ",v)
	else if ( ch == 14 && ct >= 80 && ct < 96 )
		print("CS32 row 1 slot ",ct-80," val ",v)
	else if ( ch == 15 && ct >= 16 && ct < 32 )
		print("CS32 row 2 slot ",ct-16," val ",v)
	else if ( ch == 15 && ct >= 0 && ct < 16 )
		print("CS32 row 3 slot ",ct," val ",v)
	else if ( ch == 14 && ct >= 64 && ct < 80 )
		print("CS32 row 4 slot ",ct-64," val ",v)
	else if ( ch == 14 && ct >= 0 && ct < 16 )
		print("CS32 row 5 slot ",ct," val ",v)
}

function task_midimon(verbose) {

	k = korgcontrol(0)
	if ( k == -1 ) {
		Midiin[$] = f = open()
		onexit(closemidi,$)
	} else {
		f = open()
		k.sendtofifo(f)
		onexit(unkorgmon,k,f)
	}

	while ( (m=get(f)) != Eof ) {
		if ( verbose ) {
			if ( m.type == CONTROLLER ) {
				ch = (integer(subbytes(m,1,1)) & 0xf) + 1
				ct = integer(subbytes(m,2,1))
				v = integer(subbytes(m,3,1))
				print("p=",m,"  ch=",ch," controller=",ct,"  value=",v)
				# print_cs32_msg(m)
			} else {
				print("p=",m,"  pitch=",m.pitch,"  vol=",m.vol)
			}
		} else {
			print(m)
		}
	}
}
